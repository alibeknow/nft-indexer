name: lint, test, publish charts

on:
  pull_request:
    paths:
      - 'helm/charts/**'

jobs:
  changed:
    runs-on: [self-hosted, shared]
    outputs:
      charts: ${{ steps.list-changed.outputs.changed }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up Helm
        uses: azure/setup-helm@v1
        with:
          version: v3.7.2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.7
      - name: Set up chart-testing
        uses: helm/chart-testing-action@v2.2.0
      - name: Run chart-testing (list-changed)
        id: list-changed
        env:
          CT_DEBUG: "false"
        run: |
          changed=$(ct list-changed --config .github/ct.yaml)
          [[ -n "$changed" ]] &&
          ( echo -e "Charts changed :\n$changed\n" && echo "::set-output name=changed::$(echo $changed | sed "s/\n/ /g")" ) ||
          ( echo "No changes - failing" && exit 1 )

  lint-chart:
    runs-on: [self-hosted, shared]
    needs:
      - changed
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v2
        with:
          python-version: 3.7
      - name: Set up chart-testing
        uses: helm/chart-testing-action@v2.2.0
      - name: Run chart-testing (lint)
        run: ct lint --config .github/ct.yaml

  lint-docs:
    runs-on: [self-hosted, shared]
    needs:
      - changed
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Run helm-docs
        env:
          HELM_DOCS_VERSION: "1.11.0"
          HELM_DOCS_BASE_URL: "https://github.com/norwoodj/helm-docs/releases/download"
        run: |
          OS=$(uname)

          # install helm-docs
          curl -sSfL "${HELM_DOCS_BASE_URL}/v${HELM_DOCS_VERSION}/helm-docs_${HELM_DOCS_VERSION}_${OS}_x86_64.tar.gz" |
          tar -xzf - helm-docs

          # validate docs
          ./helm-docs
          git diff --exit-code

  kubeconform-chart:
    runs-on: [self-hosted, shared]
    needs:
      - changed
    strategy:
      matrix:
        k8s:
          - v1.21.2
          - v1.22.4
          - v1.23.0
          - v1.24.0
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Run kubeconform
        env:
          KUBERNETES_VERSION: ${{ matrix.k8s }}
          CHANGED_CHARTS: ${{needs.changed.outputs.charts}}
          KUBECONFORM_VERSION: "v0.4.12"
          KUBECONFORM_BASE_URL: "https://github.com/yannh/kubeconform/releases/download"
          FILENAME_FORMAT: "{kind}-{group}-{version}"
        run: |
          set -o pipefail

          OS=$(uname)

          # install kubeconform
          curl -sSfL "${KUBECONFORM_BASE_URL}/${KUBECONFORM_VERSION}/kubeconform-${OS}-amd64.tar.gz" |
          tar -xzf - kubeconform

          # validate changed charts
          for chart in ${CHANGED_CHARTS}; do
            values=$(echo "${chart}" | sed "s/charts/values/g")
            echo "Running kubeconform for folder: '${chart}'"
            helm dep up "${chart}" &&
            for value in $(find "${values}" -type f -name "*.yaml"); do
              echo -e "â–¶ Validating ${chart} with values from ${value}"
              helm template --kube-version "${KUBERNETES_VERSION#v}" -f "${value}" "${chart}" |
              ./kubeconform -strict -ignore-missing-schemas -exit-on-error \
                -schema-location default -schema-location 'helm/k8s-crds-schemas/{{ .ResourceKind }}{{ .KindSuffix }}.json' \
                -kubernetes-version "${KUBERNETES_VERSION#v}" -summary -verbose -schema-location default
            done
          done

  helm-install-test:
    name: helm-install-test
    runs-on: [ ubuntu-latest ]
    needs:
      - kubeconform-chart
      - lint-chart
      - lint-docs
    strategy:
      matrix:
        k8s:
          - v1.21.2
          - v1.22.4
          - v1.23.0
          - v1.24.0
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up Helm
        uses: azure/setup-helm@v1
        with:
          version: v3.7.2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.7
      - name: Set up chart-testing
        uses: helm/chart-testing-action@v2.2.0
      - name: Create kind cluster config
        env:
          DOCKER_CONFIG: ${{ secrets.DOCKER_CONFIG }}
        run: |
          echo "${DOCKER_CONFIG}" > /tmp/docker-config.json
          cat <<EOF>>/tmp/kind-config.yaml
          kind: Cluster
          apiVersion: kind.x-k8s.io/v1alpha4
          nodes:
          - role: control-plane
            kubeadmConfigPatches:
            - |
              kind: InitConfiguration
              nodeRegistration:
                kubeletExtraArgs:
                  node-labels: "ingress-ready=true"
            extraMounts:
            - containerPath: /var/lib/kubelet/config.json
              hostPath: /tmp/docker-config.json
            extraPortMappings:
            - containerPort: 80
              hostPort: 80
              protocol: TCP
            - containerPort: 443
              hostPort: 443
              protocol: TCP
          EOF
      - name: Create kind cluster
        uses: helm/kind-action@v1.2.0
        with:
          node_image: kindest/node:${{ matrix.k8s }}
          config: /tmp/kind-config.yaml
          log_level: info
          version: v0.13.0
      - name: Validate kind cluster info
        run: |
          kubectl cluster-info
          kubectl get node -o jsonpath={..nodeInfo.kubeletVersion}
      - name: Install kind ingress-nginx
        run: |
          kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/kind/deploy.yaml
          kubectl wait --namespace ingress-nginx --for=condition=ready pod --selector=app.kubernetes.io/component=controller --timeout=90s
      - name: Run chart-testing install
        run: ct install --config .github/ct.yaml

  publish-chartmuseum-dev:
    name: publish-chartmuseum-dev
    environment: dev
    runs-on: [self-hosted, shared]
    needs:
      - changed
      - lint-chart
      - lint-docs
      - kubeconform-chart
      - helm-install-test
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Add chartmuseum-dev helm repo
        run: |
          if ! helm plugin list | grep -q push; then
            helm plugin install https://github.com/chartmuseum/helm-push.git
          fi
          helm repo add chartmuseum-dev --username ${{ secrets.CHARTMUSEUM_USER }} --password ${{ secrets.CHARTMUSEUM_PASSWORD }} ${{ secrets.CHARTMUSEUM_URL }} &&
          helm repo update
      - name: Push chart to chartmuseum-dev repo
        env:
          CHANGED_CHARTS: ${{needs.changed.outputs.charts}}
        run: |
          for chart in ${CHANGED_CHARTS}; do
            helm cm-push -f $chart chartmuseum-dev
          done

  publish-chartmuseum-prd:
    name: publish-chartmuseum-prd
    environment: prd
    runs-on: [ self-hosted, shared ]
    needs:
      - changed
      - kubeconform-chart
      - publish-chartmuseum-dev
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Add chartmuseum-prd helm repo
        run: |
          if ! helm plugin list | grep -q push; then
            helm plugin install https://github.com/chartmuseum/helm-push.git
          fi
          helm repo add chartmuseum-prd --username ${{ secrets.CHARTMUSEUM_USER }} --password ${{ secrets.CHARTMUSEUM_PASSWORD }} ${{ secrets.CHARTMUSEUM_URL }} &&
          helm repo update
      - name: Push chart to chartmuseum-prd repo
        env:
          CHANGED_CHARTS: ${{needs.changed.outputs.charts}}
        run: |
          for chart in ${CHANGED_CHARTS}; do
            helm cm-push $chart chartmuseum-prd
          done

  deploy-instructions:
    name: deploy-instructions
    runs-on: [self-hosted, shared]
    needs:
      - publish-chartmuseum-dev
      - publish-chartmuseum-prd
    steps:
      - name: show deployment instructions
        run: |
          echo "A new chart has been deployed in chartmuseum prd and chartmuseum dev"
          echo "Please ensure your spinnaker pipeline is using this new chart version and was deploying correctly"
          echo "Once deployment is successful on spinnaker, you can merge this PR"
